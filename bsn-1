# from konlpy.tag import Okt
from nltk.tokenize import word_tokenize, sent_tokenize
from nltk.tag import pos_tag
from gensim.models import Word2Vec
from gensim.models import KeyedVectors
import random as rand

a = ['''data'''] #데이터 
# for qsent in sent_tokenize(q[0]):
#     None

# for asent in sent_tokenize(a[0]):
#     None
# model = Word2Vec(sentences=result, vector_size=100, window=5, min_count=5, workers=4, sg=0)
# for i in range(len(q)):
#     qword= word_tokenize(q[i])
#     aword= word_tokenize(a[i])

# print(pos_tag(qword))
manyb = []
result = []
# otk = Okt()
aword = word_tokenize(a[0])
# aword = otk.morphs(a[2])
def searchAfter(text):
    searchText = list(filter(lambda e:aword[e] == text, range(len(aword))))
    after = []
    for j in range(len(searchText)):
        try:
            after.append(aword[searchText[j]+1])
        except:
            after.append(["fuck"])
    return [manyText(after)]
        # afterCount = list(filter(lambda e:after[e] == after[j], range(len(after))))
    
def searchBefore(text):
    searchText = list(filter(lambda e:aword[e] == text, range(len(aword))))
    before = []
    for j in range(len(searchText)):
        before.append(aword[searchText[j]-1])
    return [manyText(before)] 

def manyText(text):
    global manyb
    global result
    manyb = []
    for i in range(len(text)):
        manyb.append(text.count(text[i]))
        # manyb = set(manyb)
        # text = set(text)
        manyb = list(manyb)
    # try:

    r = rand.randrange(0, 3)
    if r ==2:
        ra = rand.randrange(0, len(text))
        return text[ra]
        
    else:
        result = text[manyb.index(max(manyb))]
        return result
    #many.reverse()
    
String = "I" #중심단어

sb5 = searchBefore(String)
sb4 = searchBefore(sb5[0])
sb3 = searchBefore(sb4[0])
sb2 = searchBefore(sb3[0])
sb1 = searchBefore(sb2[0])

sa5 = searchAfter(String)
sa4 = searchAfter(sa5[0])
sa3 = searchAfter(sa4[0])
sa2 = searchAfter(sa3[0])
sa1 = searchAfter(sa2[0])
generateA = sb1+sb2+sb3+sb4+sb5+[String]+sa5+sa4+sa3+sa2+sa1 
generateA = " ".join(generateA)
print(generateA)
